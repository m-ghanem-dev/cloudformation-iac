##########################################################################################################
# Application CloudFormation Stack
# - ALB with Listener and Target Group
# - Launch Template for EC2 configuration
# - Auto Scaling Group with private subnet placement
# - Security Groups for ALB and App Servers
##########################################################################################################

Description: Application CloudFormation Stack

Parameters:
  NetworkStackName:
    Description: Network stack name
    Type: String
    Default: networkStack

  AmiId:
    Description: The Amazon Machine Image ID.
    Type: String
    Default: ami-0a87a69d69fa289be

Resources:

  ##########################################################################################################
  # Security Groups
  ##########################################################################################################
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: 
          Fn::ImportValue: !Sub "${AWS::Region}-${NetworkStackName}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  AppServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for App Server instances
      VpcId: 
          Fn::ImportValue: !Sub "${AWS::Region}-${NetworkStackName}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSG

  ##########################################################################################################
  # Application Load Balancer, Listener, and Target Group
  ##########################################################################################################
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-ALB"
      Subnets:
        - Fn::ImportValue: !Sub "${AWS::Region}-${NetworkStackName}-PublicSubnet"
        - Fn::ImportValue: !Sub "${AWS::Region}-${NetworkStackName}-PublicSubnet1"
      SecurityGroups:
        - !Ref LoadBalancerSG
      Scheme: internet-facing
      Type: application

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-TargetGroup"
      Port: 80
      TargetType: "instance"
      Protocol: HTTP
      VpcId: 
          Fn::ImportValue: !Sub "${AWS::Region}-${NetworkStackName}-VPC"
      HealthCheckPath: /
      Matcher:
        HttpCode: 200

  AppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup

  ##########################################################################################################
  # Launch Template
  ##########################################################################################################
  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-LaunchTemplate"
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: t3.micro
        SecurityGroupIds:
          - !Ref AppServerSG
        UserData:
          Fn::Base64: |
            #!/bin/bash
            apt-get update -y
            apt-get install -y nginx
            systemctl start nginx
            systemctl enable nginx

  ##########################################################################################################
  # Auto Scaling Group
  ##########################################################################################################
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${AWS::Region}-${NetworkStackName}-PrivateSubnet0"
        - Fn::ImportValue: !Sub "${AWS::Region}-${NetworkStackName}-PrivateSubnet1"
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref AppTargetGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-AppServer"
          PropagateAtLaunch: true

Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt AppLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-LoadBalancerDNS"
